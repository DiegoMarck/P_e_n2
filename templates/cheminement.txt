cr√©ation du dossier ProjetEscalade
se placer dans se dossier
cr√©ation du projet Symfony :
Symfony new projetescalade --full
modification du fichier .env
Cr√©er la BDD : php bin/console doctrine:database:create
symfony server:start

Cr√©er les entit√©es Site, R√©gion, Topos : 

php bin/console make:entity
php bin/console make:migration
php bin/console doctrine:migrations:migrate
php bin/console doctrine:migrations:migrate

faire les cruds pour les classes Sites, Region, Topos
php bin/console make:crud
NomDeLaClasse concern√©e

Mise en place de la s√©curit√© : 

cr√©ation d'un espace priv√© pour les users et les admins

1.	composer require symfony/security-bundle
D√©but de la mise en place de la s√©curit√©
 
2.	php bin/console make:user
3.	php bin/console make:auth = systh√®me d'authentification
cr√©er le formulaire de login dans le dossier security
va dans authenticator et modifie la ligne 100 en d√©commentant et donne une route user ou admin
rajoute cette condition pour donn√©e l'acc√®s au backoffice si c'est un admni.

 if(in_array('ROLE_ADMIN', $user->getRoles() ))//verifi si admin
        {
            dump($user->getRoles());
            return new RedirectResponse($this->urlGenerator->generate('admin'));
        }
        else
        {
            return new RedirectResponse($this->urlGenerator->generate('front'));
        }
        throw new \Exception('TODO: provide a valid redirect inside '.__FILE__);
cr√©ation du securityControler
Rajouter isGranted au dessus de class qui r√©serve l'acces aux admin, permet de v√©rifie que l'utilisateur connect√© est un admin 
+ encoder pour encoder les mots de passe
Dans user on va cr√©er la fonction __toString(){ return $this->getPseudo() ;}   - sous le construct
on doit charger la librairie suivante :
4. composer require orm -fixture --dev
5. php bin/console make:fixture    


6. php bin/console doctrine:fixture:load
Quest. Carefull‚Ä¶  -> yes

Mise en place du FRont et de l'admin
7.	On rajoute un controller php bin/console make:controller Front
8.	On rajoute un controller php bin/console make:controller Admin

Mise en pace de la librairie Vichuploader pour l'upload des fichiers multim√©dias
modification du fichier yaml, importation de la classe use Vich\UploaderBundle\Form\Type\VichImageType; dans le fichier SiteType.php et TopoType.php

Importation de mon travail en css et adaptation √† symfony, mise en place du c√¥t√© responsive, philosophie mobile first. Menu burger pour mobile,  ++ responsive.

Mise en place du formulaire d'ajoute de site avec les diff√©rent type de menu, checkbox, liste d√©roulantes. Mise en pace d'un peu de Bootstrape vu avec Laura pour rendre plus agr√©able la pr√©sentation : ["attr"=>["class"=>"form-control"]] √† ajouter dans le $builder dans chaque 'add', chaque champ. Le lien Bootstrape est rajout√© dans base.html.twig.

Crud des entit√©es concern√©es dont User

Pour l'upload des images

1/Pour upload une image on doit 
 
Aller sur https://github.com/dustin10/VichUploaderBundle/blob/master/docs/installation.md
 
2/Lancer la commande : 
 
composer require vich/uploader-bundle
+ yes

Configuration du chargement d'image multiple dans Site sans vich
On ajoute le champ  dans le formulaire de Site :
->add('site', FileType::class, [
                'label' => false,
                'multiple' => true,üü¢
                'mapped' =>false, 
                'required' => false
            ])
puis dans service.yaml rajoute dans parameters:
    images_directory: '%kernel.projet_dir%/public/uploads'
puis 3 modifications dans ControllerSite cf SiteController

Puis rajoute cascade={"persist"} dans ppt√© media de Site
Dans le Sitecontroller,on instantie un objet de media

Ajoute et compl√®te ces 2 fonctions  dans le siteController: 

use Symfony\Component\HttpKernel\KernelInterface;

public function upload( KernelInterface $kernel): Response
    {
 
       $imagesDir = $kernel->getProjectDir().'/public/uploads'; // equivalent √† $this->getParameter('images_directory')
       dump($imagesDir) ;
        return $this->render('site/show.html.twig');
    }

public function new(Request $request): Response
{
    $site = new Site();
    $form = $this->createForm(SiteType::class, $site);
    $form->handleRequest($request);

    if ($form->isSubmitted() && $form->isValid()) {
        //on recup√®re les medias transmises
        $media = $form->get('site')->getData();
        //on boucle sur les medias 
        foreach($media as $medi){
            //on g√©n√®re un nouveau nom de fichier
            $fichier = md5(uniqid()) . '.' . $medi->guessExtension();
            //on copie le fichier dans le dossier img
            $medi->move(
                $this->getParameter('images_directory'),
                $fichier
            );
            //on stocke l'image dans la bdd
            $img = new Media();
            $img->setNom($fichier);
            $site->addMedium($img);

        }

On colle le m√™me code √† partir de la ligne 113 dans le edit

->r√©glages du css :
dans body :
/*position: relative;
    float: left;*/
    overflow: scroll;

Donne une seconde class, .tableTopos dans la table de index topo: 
.tableTopos{
    width: 100% !important;
    color: mediumblue;
    display: block;
    overflow: scroll;
}
cela va surcharger la class. C'est le niveau de surcharge qui op√®re pr√©f√©rentiellement.

Retour sur le d√©velopement du formulaire avec la liste d√©roulante des Typederochers . Pour cela il faut transformer l'array en string.
Il faut √©galement rajouter  'In Stock' => true,
                            'Out of Stock' => false,			     
                            ),'multiple' => true, 
                            'expanded' => false,
apr√®s tous les choix possibles de la liste dans choices.

Ajouter d'un lien adresse mail pour le concours photo

Ajout du footer dans base.hhtml.twig

amelioration des markers et creation du lien de la carte vers les Sites

//marker.bindPopup( "<a href="{{ path("site_show" )}}">"site"</a>");
 marqueur.bindPopup(<a href="{{ path('site_show', {'id':sites.id}) }}">site</a>);

Modification BDD
SET @num :0;
UPDATE site SET id = @num := (@num+1);
ALTER TABLE site AUTO_INCREMENT = 1;

fonts : Tillana regular 400:
<link rel="preconnect" href="https://fonts.googleapis.com">
<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
<link href="https://fonts.googleapis.com/css2?family=Tillana&display=swap" rel="stylesheet">
css : font-family: 'Tillana', cursive;

Averia Libre
<link rel="preconnect" href="https://fonts.googleapis.com">
<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
<link href="https://fonts.googleapis.com/css2?family=Averia+Libre:wght@300&family=Tillana&display=swap" rel="stylesheet">

CSS rules to specify families

font-family: 'Averia Libre', cursive;
font-family: 'Tillana', cursive;

erreur:
Configuration de pmadb‚Ä¶ en erreurDocumentation
Fonctions relationnelles D√©sactiv√©

Travail sur la validation -> installer :
    + composer require symfony/validator doctrine/annotations
    +use Symfony\Component\Validator\Constraints as Assert;
    +cf doc exemple sur la longueur : 
    @Assert\Length(
        *      min = 2,
        *      max = 50,
        *      minMessage = "Your first name must be at least {{ limit }} characters long",
        *      maxMessage = "Your first name cannot be longer than {{ limit }} characters")


Projet Gitter 20/07/2021


bin/console doctrine:migrations:sync-metadata-storage.

recherche mise en forme sur les formulaires ->  yarn add bootstrap
+  @import "~bootstrap/scss/bootstrap"; dans css
decommenter le twig.yaml
yarn run encore dev

Mise en place du converter. Cr√©ation du fichier converter.html.twig et de la route /conv dans siteController avec la fonction converter. 
Mise en place des fichiers stylesConverter.css et script.js correspondant.


API pays
<img src=`https://www.countryflags.io/${country}/flat/64.png`>


$countries = array("countries" => array(
    		["id"=> "1" , 
    		"code"=>"AD", 
    		"nom"=> "Andorra"],
    		["id"=>"2", 
    		"code"=>"AE", 
    		"nom"=>"United Arab Emirates"],
    		["id"=>"3", 
    		"code"=>"AF", 
    		"nom"=>"Afghanistan"]
 		));

Mise en place de l'API Platform



mise en place de la bibioth√®que fakerphp/faker pour faire les fixtures
composer require fakerphp/faker --dev  car besoin qu'en mode dev
public function load(ObjectManager $manager)
    {
        //utilisation des faker
        $faker = Faker\Factory::create('fr_FR');

        //cr√©ation d'un utilisateur
        $user = new User();
        $password = $this->encoder->encodePassword($user, 'password');
            $user->setEmail('user@test.com')
                    ->setPseudo($faker->Pseudo())
                    ->setRoles($faker->Roles());
            $user->setPassword($faker->$password);
            // $product = new Product();
        $manager->persist($user);

php bin/console doctrine:fixture:load


creation de l'entit√© entrainement

Continuation de l'installation de l'easybundle
composer require easycorp/easyadmin-bundle
php bin/console make:admin:dashboard
php bin/console make:admin:crud

<i class="fas fa-globe"></i>
<i class="fas fa-book"></i>
<i class="fas fa-running"></i>
<i class="fas fa-users"></i>

L'algorithme bcrypt est le r√©sultat du cryptage du texte "OrpheanBeholderScryDoubt" 64 fois √† l'aide de Blowfish. Dans bcrypt, la fonction habituelle de configuration de cl√© Blowfish est remplac√©e par une fonction de configuration de cl√© co√ªteuse (EksBlowfishSetup)

video EasyAdmin3 Symfony 5 Tableau de bord et configuration
essai avec dans wellcome.html.twig  : <img src="asset{{img/iconeDash/Rock_Climbing.png}}" alt="icone" width="150" height="150">

changement de cette fct¬∞ avec updatedAt
/**
     * Set the value of imageFile
     *
     * @return  self
     */ 
    public function setImageFile(File $file)
    {
        $this->imageFile = $file;
        if($file !== null){
            $this->datedeMiseajour = new \DateTime();

        }
        return $this;
    }

Assert dans la validation des formulaires :
@Assert\NotBlank() qui v√©rifie que le champ n‚Äôest pas vide.
@Assert\Length(
     *      min = 2,
     *      max = 50,
     *      minMessage = "Your first name must be at least 2 characters long",
     *      maxMessage = "Your first name cannot be longer than 50 characters")

"cache:clear": "symfony-cmd",
tentative d'installation de lipp imagine mais ca ne marche pas
symfony composer req "imagine/imagine:^1.2"
test modifications

Cr√©ation de la partie itin√©raire redirection vers google map, 11/02/23:
// marqueur.bindPopup('<h3>' + site.nom + '</h3><p>' + site.nombredeVoie + '</p><a href="/site/' + site.id + '">site</a><a href="https://maps.google.com/?q={{ sites.latitude }},{{ sites.longitude }}">Open in GPS</a>');
anciens marqueur : 
// marqueur.bindPopup('<h3>' + site.nom + '</h3><p>' + site.nombredeVoie + '</p><a href="/site/' + site.id + '">site</a>');
// marqueur.bindPopup('<h3>' + site.nom + '</h3><p>' + site.nombredeVoie + '</p><a href="/site/' + site.id + '">site</a><a href="https://maps.google.com/?q=' + site.latitude + ',' + site.longitude + '">Open in GPS</a>')
function openGPS(latitude, longitude) {
			if (confirm('Do you want to open this location in Google Maps or Apple Maps?')) {
				if (navigator.userAgent.indexOf('iPhone') != -1 || navigator.userAgent.indexOf('iPad') != -1 || navigator.userAgent.indexOf('iPod') != -1) {
				window.open('maps://maps.apple.com/?q=' + latitude + ',' + longitude)
				} else {
				window.open('https://maps.google.com/?q=' + latitude + ',' + longitude)
				}
			}
			}

Essai pour l'api meteo
<script>//api meteo

const weatherIcons = {
"Rain": "wi wi-day-rain",
"Clouds": "wi wi-day-cloudy",
"Clear": "wi wi-day-sunny",
"Snow": "wi wi-day-snow",
"mist": "wi wi-day-fog",
"Drizzle": "wi wi-day-sleet",
}
const API_KEY = 'ff5d53b6045f9333580b4c1992052756'; 

const part = 'current,minutely,hourly,daily,alerts'; // ajout de la variable "part"

function capitalize(str) {
  return str[0].toUpperCase() + str.slice(1);
}

function getPosition() {
  return new Promise((resolve, reject) => {
    navigator.geolocation.getCurrentPosition(resolve, reject);
  });
}


async function main2() {
  const position = await getPosition();
  const {latitude, longitude} = position.coords;

  const meteo = await fetch(`https://api.openweathermap.org/data/2.5/weather?lat=${latitude}&lon=${longitude}&lang=fr&units=metric&appid=${API_KEY}`)
    .then(response => response.json())
    .then(json => json)

  displayWeatherInfos(meteo)
}

function displayWeatherInfos(data) {
		console.log(data) 

  const temperature = data.main.temp;
  const conditions = data.main.weather[0].main;
  const description = data.main.weather[0].description;

  document.querySelector('#ville').textContent = `${data.lat}, ${data.lon}`;
  document.querySelector('#temperature').textContent = Math.round(temperature);
  document.querySelector('#conditions').textContent = capitalize(description);
  document.querySelector('i.wi').className = weatherIcons[conditions];
  document.querySelector('#app').className = conditions.toLowerCase();
  
}

main2();




</script>

fetch(url)
.then((response) =>
	response.json().then((data) => {
		console.log(data)
	})
)

{# <div class="panel" id="apiMeteo">
			<section id="app">
				<h1>
					<span id="ville">Marseille</span>
					<span class="tooltip1">Tapez un autre ville si vous la souhaitez</span>
				</h1>
				<i class="wi wi-day-rain"></i>
				<h2>
					<span id="temperature">25</span>¬∞C ( <span id="conditions">Ciel d√©gag√©</span> )
				</h2>
			</section>    
		</div> #}


#apiMeteo {
            font-family: roboto;
        }

        h1 {
            font-size: 3em;
        }

        h2 {
            font-size: 2em;
        }

        #ville {
            font-size: 2rem;
            font-weight: bold;
        }
        
        .tooltip1 {
            font-size: 1rem;
            margin-left: 1rem;
        }
        
        .wi {
            font-size: 3rem;
            line-height: 2em;
            color: white;
            font-family: roboto;

        }
        
        #temperature {
            font-size: 3rem;
            font-weight: bold;
        }
        
        #conditions {
            font-size: 2rem;
            font-weight: bold;
        }